#import_or_install
import importlib
import subprocess
import sys


# Pip handling
def get_pip_version():
    try:
        result = subprocess.run([sys.executable, "-m", "pip", "--version"], capture_output=True, text=True)
        return result.stdout.split()[1]
    except Exception:
        return None
        
import time     
SLEEP_DURATION = 0.25  # Adjust this value as needed    
def get_latest_pip_version():
    try:
        result = subprocess.run([sys.executable, "-m", "pip", "install", "--upgrade", "pip", "--dry-run"], capture_output=True, text=True, check=True)
        for line in result.stdout.splitlines():
            if "Would install" in line:
                return line.split()[-1]
        return None
    except Exception:
        return None
        
SLEEP_DURATION = 0.25  
def import_or_install(packages):
    if isinstance(packages, str):
        packages = [{'import_name': packages}]
    elif isinstance(packages, dict):
        packages = [packages]
    elif not isinstance(packages, list):
        raise ValueError("packages must be a string, a dictionary, or a list of dictionaries")

    yes_to_all = False
    packages_to_install = []

    # First, check and update pip if necessary
    print("\033[93mChecking pip version...\033[0m")
    time.sleep(SLEEP_DURATION)
    
    current_version = get_pip_version()
    latest_version = get_latest_pip_version()
    
    if current_version and latest_version and current_version != latest_version:
        print(f"\033[93mUpgrading pip from {current_version} to {latest_version}\033[0m")
        time.sleep(SLEEP_DURATION)
        try:
            subprocess.run([sys.executable, "-m", "pip", "install", "--upgrade", "pip"], check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            print("\033[92mpip has been successfully updated\033[0m")
        except subprocess.CalledProcessError:
            print("\033[91mFailed to update pip. Continuing with package installation...\033[0m")
    else:
        print("\033[92mpip is already up-to-date\033[0m")

    for package in packages:
        if isinstance(package, str):
            package = {'import_name': package}
        
        import_name = package['import_name']
        install_name = package.get('install_name', import_name)
        version = package.get('version', '')

        if import_name.lower() == 'tkinter':
            print(f"\033[92mtkinter is installed by default with Python\033[0m")
            time.sleep(SLEEP_DURATION)
            continue

        try:
            importlib.import_module(import_name)
            print(f"\033[92m{import_name} is installed\033[0m")
            time.sleep(SLEEP_DURATION)
        except ImportError:
            print(f"\033[91m{import_name} not found.\033[0m")
            time.sleep(SLEEP_DURATION)
            packages_to_install.append((import_name, install_name, version))

    if packages_to_install:
        if not yes_to_all:
            user_input = input(f"\033[33mDo you want to install all missing packages? ([\033[32mY\033[0m\033[33m]/n/all):\033[0m")
            if user_input.strip().lower() == 'all' or user_input.strip().lower() == 'y' or user_input.strip().lower() == "":
                yes_to_all = True
            elif user_input.strip().lower() != 'y':
                print("The program requires these packages to run. Exiting...")
                time.sleep(SLEEP_DURATION)
                sys.exit(1)

        for import_name, install_name, version in packages_to_install:
            if not yes_to_all:
                user_input = input(f"Do you want to install {install_name}? (y/n): ")
                if user_input.strip().lower() != 'y':
                    print(f"The program requires {import_name} to run. Exiting...")
                    time.sleep(SLEEP_DURATION)
                    sys.exit(1)

            try:
                install_command = [sys.executable, "-m", "pip", "install"]
                if version:
                    install_command.append(f"{install_name}{version}")
                else:
                    install_command.append(install_name)

                subprocess.run(install_command, check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
                importlib.import_module(import_name)
                print(f"\033[92m{install_name} has been successfully installed\033[0m")
                time.sleep(SLEEP_DURATION)
            except subprocess.CalledProcessError:
                print(f"\033[93m{install_name} installation failed\033[0m")
                time.sleep(SLEEP_DURATION)
                sys.exit(1)

# List of required packages
required_packages = [
    'numpy',
    'sounddevice',
    'librosa',
    'faster_whisper',
    'PyQt6',
    'pyqtgraph',
]
import_or_install(required_packages)
